class Solution {
public:
    string getHint(string secret, string guess) {
        int aCnt = 0;
        int bCnt = 0;
        vector<int> sVec(10, 0); 
        vector<int> gVec(10, 0); 
        if (secret.size() != guess.size() || secret.empty()) { return "0A0B"; }
        for (int i = 0; i < secret.size(); ++i) {
            char c1 = secret[i]; char c2 = guess[i];
            if (c1 == c2) {
                ++aCnt; 
            } else {
                ++sVec[c1-'0'];
                ++gVec[c2-'0'];
            }
        }
        // count b 
        for (int i = 0; i < sVec.size(); ++i) {
            bCnt += min(sVec[i], gVec[i]);
        }
        return to_string(aCnt) + 'A' + to_string(bCnt) + 'B';
    }
    // bool isUsed(int index, vector<int>used){
    //     for(int i = 0; i<used.size(); i++){
    //         if(index == used[i])
    //             return 1;
    //     }
    //     return 0;
    // }
    // string getHint(string secret, string guess) {
    //     int a = 0;
    //     int b = 0;
    //     vector<int>usedI;
    //     vector<int>usedJ;
    //     for(int i = 0; i<secret.size(); i++){
    //         if(secret[i] == guess[i]){
    //             a++;
    //             usedI.push_back(i);
    //             usedJ.push_back(i);
    //         }
    //     }
    //     for(int i = 0; i<secret.size(); i++){
    //         for(int j = 0; j<guess.size(); j++){
    //             if(secret[i] == guess[j]){
    //                 if(isUsed(i, usedI) || isUsed(j, usedJ)){
    //                     continue;
    //                 }
    //                 else if(i != j){
    //                     b++;
    //                     usedJ.push_back(j);
    //                     break;
    //                 }
    //             }
                
    //         }
    //     }
    //     return to_string(a) + 'A' + to_string(b) + 'B'; 
    // }
};
